很有借鉴价值。
https://blog.csdn.net/baidu_28312631/article/details/47418773



一、1002 数塔取数问题
//递归做法，存在重复计算，会超时
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int n;
#define m 500
int a[m][m]={0};
int b[m][m];
int maxsum(int i,int j){
	if(i==n){
		return a[i][j];
	}
	int x=maxsum(i+1,j);
	int y=maxsum(i+1,j+1);
	return max(x,y)+a[i][j];
}
int main(){
	int i,j;
	cin>>n;

	for(i=0;i<n;i++){
		for(j=0;j<=i;j++){
			cin>>a[i][j];
		}
	}
    cout<<maxsum(0,0)<<endl;
	return 0;
}




//比起上一个这个用了记忆数组b[][]，将每次算出的结果保存下来，下次用的时候不用再次计算，直接使用就可以。

#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int n;
#define m 500
int a[m][m]={0};
int b[m][m];
int maxsum(int i,int j){
	if(b[i][j]!=-1){
		return b[i][j];
	}
	if(i==n){
		return a[i][j];
	}
	int x=maxsum(i+1,j);
	int y=maxsum(i+1,j+1);
	b[i][j]=max(x,y)+a[i][j];
	return b[i][j];
}
int main(){
	int i,j;
	cin>>n;

	for(i=0;i<n;i++){
		for(j=0;j<=i;j++){
			cin>>a[i][j];
			b[i][j]=-1;
		}
	}
    cout<<maxsum(0,0)<<endl;
	return 0;
}
//还有会更好的方法
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int n;
#define m 500
int a[m][m]={0};
int b[m][m];
//int maxsum(int i,int j){
//	if(b[i][j]!=-1){
//		return b[i][j];
//	}
//	if(i==n){
//		return a[i][j];
//	}
//	int x=maxsum(i+1,j);
//	int y=maxsum(i+1,j+1);
//	b[i][j]=max(x,y)+a[i][j];
//	return b[i][j];
//}
int main(){
	int i,j;
	cin>>n;

	for(i=0;i<n;i++){
		for(j=0;j<=i;j++){
			cin>>a[i][j];
			b[i][j]=-1;
		}
	}
	for(i=n-1;i>=0;i--){
		for(j=0;j<=i;j++){
//			x=a[i][j]+a[i+1][j];
			if(a[i+1][j]>a[i+1][j+1]){//从下往上算
				a[i][j]=a[i][j]+a[i+1][j];
			}else{
				a[i][j]=a[i][j]+a[i+1][j+1];
			}
		}
	}
    cout<<a[0][0]<<endl;
	return 0;
}

#include <iostream>  
#include <algorithm> 
using namespace std; 
 
#define MAX 501  
 
int D[MAX][MAX];   
int n;  
int maxSum[MAX][MAX]; 
int main(){    
	int i,j;    
	cin >> n;    
	for(i=1;i<=n;i++)   
		for(j=1;j<=i;j++)        
			cin >> D[i][j];   
	for( int i = 1;i <= n; ++ i )     
		maxSum[n][i] = D[n][i];   
	for( int i = n-1; i>= 1;  --i )     
		for( int j = 1; j <= i; ++j )         
			maxSum[i][j] = max(maxSum[i+1][j],maxSum[i+1][j+1]) + D[i][j];    
	cout << maxSum[1][1] << endl;  
}





二、1083矩阵取数
法一、动态规划
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int n;
#define m 501
int a[m][m]={0};
int b[m][m];
int maxsum(int i,int j){
	if(b[i][j]!=-1){
		return b[i][j];
	}
	if(i==n){
		return a[i][j];
	}
	int x=maxsum(i,j+1);
	int y=maxsum(i+1,j);
	b[i][j]=max(x,y)+a[i][j];
	return b[i][j];
}
int main(){
	int i,j;
	cin>>n;

	for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			cin>>a[i][j];
			b[i][j]=-1;
		}
	}
    cout<<maxsum(0,0)<<endl;
	return 0;
}

法二

#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int n;
#define m 501
int a[m][m]={0};
int b[m][m];
//int maxsum(int i,int j){
//	if(b[i][j]!=-1){
//		return b[i][j];
//	}
//	if(i==n){
//		return a[i][j];
//	}
//	int x=maxsum(i,j+1);
//	int y=maxsum(i+1,j);
//	b[i][j]=max(x,y)+a[i][j];
//	return b[i][j];
//}
int main(){
	int i,j;
	cin>>n;

	for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			cin>>a[i][j];
//			b[i][j]=-1;
		}
	}
	
	for(i=1;i<n;i++){
		a[i][0]=a[i][0]+a[i-1][0];
		a[0][i]=a[0][i]+a[0][i-1];
	}
	for(i=1;i<n;i++){
	//	a[n-1][i]=a[n-1][i]+a[n-1][i-1];
	    for(j=1;j<n;j++){
	    	if(a[i-1][j]>a[i][j-1]){
	    		a[i][j]+=a[i-1][j];
			}else{
				a[i][j]+=a[i][j-1];
			}
		}
	}
	
    cout<<a[n-1][n-1]<<endl;
	return 0;
}
