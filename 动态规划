很有借鉴价值。
https://blog.csdn.net/baidu_28312631/article/details/47418773



1002 数塔取数问题
//递归做法，存在重复计算，会超时
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int n;
#define m 500
int a[m][m]={0};
int b[m][m];
int maxsum(int i,int j){
	if(i==n){
		return a[i][j];
	}
	int x=maxsum(i+1,j);
	int y=maxsum(i+1,j+1);
	return max(x,y)+a[i][j];
}
int main(){
	int i,j;
	cin>>n;

	for(i=0;i<n;i++){
		for(j=0;j<=i;j++){
			cin>>a[i][j];
		}
	}
    cout<<maxsum(0,0)<<endl;
	return 0;
}




//比起上一个这个用了记忆数组b[][]，将每次算出的结果保存下来，下次用的时候不用再次计算，直接使用就可以。

#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int n;
#define m 500
int a[m][m]={0};
int b[m][m];
int maxsum(int i,int j){
	if(b[i][j]!=-1){
		return b[i][j];
	}
	if(i==n){
		return a[i][j];
	}
	int x=maxsum(i+1,j);
	int y=maxsum(i+1,j+1);
	b[i][j]=max(x,y)+a[i][j];
	return b[i][j];
}
int main(){
	int i,j;
	cin>>n;

	for(i=0;i<n;i++){
		for(j=0;j<=i;j++){
			cin>>a[i][j];
			b[i][j]=-1;
		}
	}
    cout<<maxsum(0,0)<<endl;
	return 0;
}
//还有会更好的方法
