（1）正常数组中间的某一段和最大。这个可以通过普通的最大子段和问题求出。

（2）此数组首尾相接的某一段和最大。这种情况是由于数组中间某段和为负值，且绝对值很大导致的，那么我们只需要把中间的和为负值且绝对值最大的这一段序列求出，用总的和减去它就行了 
#include<iostream>
#include<cstring>
#include<algorithm>
#include<cmath>
#include<vector>
using namespace std;
#define N 50001
int a[N];
int n;
long long maxsum(int a[])
{
	int i;
	long long sum=0,maxs=0;
	for(i=0;i<n;i++)
	{
		if(sum<0)
		{
			sum=a[i];
		}else{
			sum+=a[i];
		}
		if(sum>maxs)
		{
			maxs=sum;
		}
	}
	return maxs;
}
int main(){
    int i,j;
    long long result=0,ans1,ans2;
    cin>>n;
    for(i=0;i<n;i++)
    {
    	cin>>a[i];
    	result+=a[i];
	}
    ans1=maxsum(a);
    for(i=0;i<n;i++)//取反求其最小子段和，一段数字的最大子段和就是所有和减去最小子段和 
    {
    	a[i]=-a[i];
	}
	ans2=maxsum(a);
	result=ans2+result;
	if(ans1>result)
	{
		cout<<ans1<<endl;
	}else{
		cout<<result<<endl;
	}
	return 0;
}// （1）正常数组中间的某一段和最大。这个可以通过普通的最大子段和问题求出。

//    （2）此数组首尾相接的某一段和最大。这种情况是由于数组中间某段和为负值，且绝对值很大导致的，
	//那么我们只需要把中间的和为负值且绝对值最大的这一段序列求出，用总的和减去它就行了 
